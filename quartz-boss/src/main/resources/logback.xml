<?xml version="1.0" encoding="UTF-8"?>
<!-- 1、scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 2、scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 3、debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
	<!-- 设置logback变量，用${name}进行调用 -->
	<!-- 应用名称 -->
	<property name="AppName" value="touch-manager" />
	<!-- 日志文件存放路径 -->
	<property name="LogFilePath" value="D:/logs/touch/" />
	<!-- 日志文件的最大值 -->
	<property name="LogFileMaxSize" value="10MB" />

	<!-- <timestamp key="bySeconds" datePattern="yyyyMMdd'T'HHmmss"/> -->

	<!-- 上下文名称，默认为“default”，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
	<contextName>${AppName}</contextName>

	<!--控制台输出 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>[%-5level] [%date{yyyy-MM-dd HH:mm:ss}] [%thread] [%logger{80}.%method\(\):%L] - %msg%n</Pattern>
		</encoder>
	</appender>

	<!-- 日志文件输出 -->
	<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 设置日志不超过${LogFileMaxSize}时的保存路径 -->
		<File>${LogFilePath}/${AppName}/${AppName}.log</File>
		<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LogFilePath}/${AppName}/${AppName}.%d{yyyy-MM-dd}-%i.log.zip</FileNamePattern>
			<!-- 最多保存90天的日志文件 -->
			<maxHistory>90</maxHistory>
			<!-- 当天的日志大小 超过${LogFileMaxSize}时，压缩日志并保存 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LogFileMaxSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 日志输出的文件的格式 -->
		<encoder>
			<pattern>[%-5level] [%date{yyyy-MM-dd HH:mm:ss}] [%thread] [%logger{80}.%method\(\):%L] - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.zyunc.xxx -->
	<logger name="cn.zyunc.touch" additivity="true" level="debug">
		<appender-ref ref="stdout" />
		<appender-ref ref="file" />
	</logger>

	<!-- root将级别为“DEBUG”及大于“DEBUG”的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console -->
	<root level="debug">
		<appender-ref ref="stdout" />
		<appender-ref ref="file" />
	</root>

</configuration>
